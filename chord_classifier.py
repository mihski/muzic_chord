import os
import numpy as np
import librosa
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
DATA_DIR = "data"  # –ü–∞–ø–∫–∞ —Å –ø–æ–¥–ø–∞–ø–∫–∞–º–∏ –∞–∫–∫–æ—Ä–¥–æ–≤

def extract_features(file_path):
    y, sr = librosa.load(file_path, duration=5)
    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)
    return np.mean(mfcc.T, axis=0)

def load_dataset(data_dir):
    X, y = [], []
    for chord_name in os.listdir(data_dir):
        chord_dir = os.path.join(data_dir, chord_name)
        if not os.path.isdir(chord_dir):
            continue
        for filename in os.listdir(chord_dir):
            if filename.endswith(".wav"):
                file_path = os.path.join(chord_dir, filename)
                try:
                    features = extract_features(file_path)
                    X.append(features)
                    y.append(chord_name)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
    return np.array(X), np.array(y)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ
X, y = load_dataset(DATA_DIR)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# –û—Ü–µ–Ω–∫–∞
y_pred = clf.predict(X_test)
print("\nüìä –û—Ç—á—ë—Ç –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏:")
print(classification_report(y_test, y_pred))

# –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
def predict_file(path):
    features = extract_features(path)
    pred = clf.predict([features])[0]
    print(f"\nüéµ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∞–∫–∫–æ—Ä–¥ –¥–ª—è '{os.path.basename(path)}': {pred}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# predict_file("test.wav")
